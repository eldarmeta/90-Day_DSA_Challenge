import java.util.*;                     // –∏–º–ø–æ—Ä—Ç —Å–∫–∞–Ω–µ—Ä–∞, —Å–ø–∏—Å–∫–æ–≤ –∏ –º–∞—Å—Å–∏–≤–æ–≤


public class IntersectionOf2Arrays {    // üëà –∏–º—è –∫–ª–∞—Å—Å–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in); // —Å–æ–∑–¥–∞—ë–º —Å–∫–∞–Ω–µ—Ä

        // –í–≤–æ–¥ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —á–∏—Å–µ–ª ‚Üí int[]
        int[] nums1 = Arrays.stream(sc.nextLine().split(" ")) // "1 2 2 1" ‚Üí ["1","2","2","1"]
                .mapToInt(Integer::parseInt)                  // –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ int
                .toArray();                                   // —Å–æ–±–∏—Ä–∞–µ–º –≤ –º–∞—Å—Å–∏–≤

        // –í–≤–æ–¥ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ —á–∏—Å–µ–ª ‚Üí int[]
        int[] nums2 = Arrays.stream(sc.nextLine().split(" "))
                .mapToInt(Integer::parseInt)
                .toArray();

        // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–æ–≤
        int[] result = intersect(nums1, nums2);

        // –ü–µ—á–∞—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for (int num : result) {
            System.out.print(num + " ");
        }
    }

    // –ú–µ—Ç–æ–¥ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –±–µ–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–π: —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤—ã + –±—É–ª–µ–≤—ã–π —Ñ–ª–∞–≥
    public static int[] intersect(int[] nums1, int[] nums2) {
        int[] temp = new int[Math.min(nums1.length, nums2.length)]; // –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        boolean[] used = new boolean[nums2.length];                 // –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º, —á—Ç–æ –∏–∑ nums2 —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
        int index = 0;

        // –í–Ω–µ—à–Ω–∏–π —Ü–∏–∫–ª –ø–æ nums1
        for (int i = 0; i < nums1.length; i++) {
            // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª –ø–æ nums2
            for (int j = 0; j < nums2.length; j++) {
                if (nums1[i] == nums2[j] && !used[j]) {
                    temp[index++] = nums1[i];  // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    used[j] = true;            // –ø–æ–º–µ—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
                    break;                     // –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç
                }
            }
        }

        return Arrays.copyOf(temp, index);     // –æ–±—Ä–µ–∑–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã
    }
}
